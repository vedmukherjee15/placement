bool detectLoop(Node* head)
{
    if(head==NULL)
     return false;
}
map <Node*,bool> visited;

Node* temp = head;

while(temp!=NULL)
{
    if(visited[temp]==true)
    {
        return true;
    }
    visited[temp] = true;
    temp = temp->next;

return false;    
}
Node* FloydDetectLoop(Node* head)
{
    if(head == NULL)
     return NULL;
    
    Node* fast = head;
    Node* slow = head;

    while(slow! = NULL  &&  fast! = NULL)
    {
        fast= fast->next;
        if(fast!=NULL)
         fast = fast->next;
    
     
     slow = slow->next;

     if(slow == fast)
       return slow;;
    }
     
    return NULL;   
    
}

Node* getstartingNode(Node* head)
{
    if(head == NULL)
      return NULL;

    Node* intersection = FloydDetectLoop(head);
    if(intersection == NULL)
       return NULL;
    Node* slow = head; 

    while(slow ! = intersection)
    {
        slow = slow->next;
        intersection = intersection->next;
    }
    return slow;
}

void removeLoop(Node* head)
{   
    if(head == NULL)
      return NULL;
    Node* startofloop = getstartingNode(head);
    if(startofloop == NULL)
       return headl;
    Node* temp = startofloop;

    while(temp->next ! = startofloop)
    {
        temp = temp->next;
    }
    temp->next = NULL;
}